#!/usr/bin/env python

import time
import json
import pika
import sys
import logging
import sys
import os
import calendar
import base64
from optparse import OptionParser
import hashlib
import uuid

# Local imports

from rpc import rpc_common
from rpc import rpcclient
from rpc import rpcrequest
from rpc import rpcresponse

PROGRAM = 'cifbulk'

USAGESTRING="""usage: %(_progname)s [options] [args]"""

_progname=sys.argv[0]
_shortname, _extension = os.path.splitext(_progname)


class CIFBulkClient(rpcclient.RPC_Client):
    """ CIF Bulk Query Client. """

    NAME = 'CIF Bulk Query RPC Client'

    def __init__(self, *args, **kwargs):
        rpcclient.RPC_Client.__init__(self, *args, **kwargs)

parser = OptionParser(usage=USAGESTRING % vars())
parser.add_option("-d", "--debug",
    action="store_true", dest="debug",
    help="Turn on debugging mode.")
parser.add_option("-D", "--days", default="7",
    action="store", dest="days", metavar="DAYS",
    help="Number of days")
parser.add_option("-e", "--rpc-exchange",
    action="store", dest="rpcexchange", metavar="RPCEXCHANGE",
    default="",
    help="Exchange to use (default: '')")
parser.add_option("-E", "--end-date", default=None,
    action="store", dest="edate", metavar="EDATE",
    help="End date (in YYYY/MM/DD[:HH] format, UTC timezone)")
parser.add_option("--etime", default=None,
    action="store", dest="etime", metavar="ENDTIME",
    help="End time (in seconds from the epoch)")
parser.add_option("-H", "--no-header",
    action="store_true", dest="noheader", default=False,
    help="Do not print '...flows found...' header.")
parser.add_option("-r", "--searchfile", default=None,
    action="store", dest="searchfile", metavar="SEARCHFILE",
    help="Search for flows to/from specified IP addresses and CIDR blocks.")
parser.add_option("--server",
    action="store", dest="server", metavar="SERVER",
    default=None,
    help="RabbitMQ server (default: None)")
parser.add_option("-S", "--start-date", default=None,
    action="store", dest="sdate", metavar="SDATE",
    help="Start date (in YYYY/MM/DD[:HH] format, UTC timezone)")
parser.add_option("--stime", default=None,
    action="store", dest="stime", metavar="STIME",
    help="Start time (in second from the epoch format)")
parser.add_option("-q", "--queue-base", default=PROGRAM,
    action="store", dest="queuebase", metavar="QUEUEBASE",
    help="Queue base name to use (default %s)" % PROGRAM)
parser.add_option("-s", "--stats",
    action="store_true", default=False, dest="stats",
    help="Add statistics output.")
parser.add_option("-u", "--usage",
    action="store_true", dest="usage",
    help="Print usage information.")
parser.add_option("-v", "--verbose",
    action="store_true", dest="verbose", default=False,
    help="Be verbose (on stdout) about what is happening.")
(options,args) = parser.parse_args()

if options.usage:
    usage = "true"
else:
    usage = "false"

stime = None
etime = None

if options.sdate is not None:
	try:
		ts = time.strptime(options.sdate, "%Y/%M/%d:%H")
	except:
		try:
			ts = time.strptime(options.sdate, "%Y/%M/%d")
		except:
			raise ValueError("Invalid start date: %s" % options.sdate)
	stime = calendar.timegm(ts)

if options.edate is not None:
	try:
		ts = time.strptime(options.edate, "%Y/%M/%d:%H")
	except:
		try:
			ts = time.strptime(options.edate, "%Y/%M/%d")
		except:
			raise ValueError("Invalid end date: %s" % options.edate)
	etime = calendar.timegm(ts)

if options.stime is not None:
	if stime is not None:
		raise Error("Cannot specify both --start-date and --stime")
	try:
		stime = int(options.stime)
	except:
		raise ValueError("Invalid stime: %s" % options.stime)
else:
	stime = "%d" % (int(time.strftime("%s",time.gmtime())) - (60 * 60 * 24 * int(options.days)))

if options.etime is not None:
	if etime is not None:
		raise Error("Cannot specify both --end-date and --etime")
	try:
		etime = int(options.etime)
	except:
		raise ValueError("Invalid etime: %s" % options.etime)
else:
	etime = time.strftime("%s",time.gmtime())

if options.noheader:
    noheader = "true"
else:
    noheader = "false"

if options.searchfile is None:
    sys.stderr.write("No search file specified: exiting.\n")
    sys.exit(1)
else:
    sf = open(options.searchfile, "r")
    searchfile = base64.b64encode(sf.read())
    sf.close()

argsopts = {'stime': stime,
            'etime': etime,
            'noheader': noheader,
            'searchfile': searchfile}

cifbulk_client = CIFBulkClient(
        program=PROGRAM,
        scriptname=_progname,
        verbose=options.verbose,
        debug=options.debug,
        server=options.server,
        exchange=options.rpcexchange,
        queuebase=options.queuebase)

requestobj = rpcrequest.RPC_Request(program=PROGRAM,
        argsopts=argsopts)

responseobj = rpcresponse.RPC_Response(program=PROGRAM)

responseobj = cifbulk_client.call(requestobj)
if responseobj.get_retcode() == 0:
    stdout_ = base64.b64decode(responseobj.get_stdout())
    s = "Received reply from server --- " + \
        "%d bytes; SHA1: %s" % \
                (len(stdout_),
                        hashlib.sha1(stdout_).hexdigest())
    cifbulk_client.logdebug(s)
    sys.stdout.write(stdout_)
else:
    s = "Received error %s from server" % responseobj.get_retcode()
    cifbulk_client.loginfo(s)
    sys.stderr.write(base64.b64decode(responseobj.get_stderr()))
sys.exit(responseobj.get_retcode())
